# -*- coding: utf-8 -*-
"""rfpcopilotai-24

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FA-RweJ7cM600kfU0j6VVRIYpSxuZg06
"""

import imaplib
import email
from email.header import decode_header

def read_latest_rfp_email(username, password):
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(username, password)
    mail.select("inbox")

    status, messages = mail.search(None, '(UNSEEN SUBJECT "RFP")')
    email_ids = messages[0].split()

    if not email_ids:
        return None, None

    latest_id = email_ids[-1]
    res, msg_data = mail.fetch(latest_id, "(RFC822)")
    raw_email = msg_data[0][1]

    msg = email.message_from_bytes(raw_email)
    subject = decode_header(msg["Subject"])[0][0]
    from_email = msg.get("From")

    body = ""
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            if content_type == "text/plain":
                body += part.get_payload(decode=True).decode()
    else:
        body += msg.get_payload(decode=True).decode()

    return from_email, body

import smtplib
from email.mime.text import MIMEText

def send_auto_response(to_email, body, user_email, user_pass):
    msg = MIMEText(body)
    msg["Subject"] = "Auto-response to Your RFP"
    msg["From"] = user_email
    msg["To"] = to_email

    server = smtplib.SMTP_SSL("smtp.gmail.com", 465)
    server.login(user_email, user_pass)
    server.send_message(msg)
    server.quit()

import ollama

def extract_requirements_with_ollama(text):
    prompt = f"""You are a project analyst. Extract the following from the RFP:

{text}

Give:
- Functional Requirements
- Non-Functional Requirements
- Use-cases
- Constraints

"""

    response = ollama.chat(model="tinyllama:1.1b-chat", messages=[
        {"role": "user", "content": prompt}
    ])
    return response['message']['content']

import streamlit.components.v1 as components

def render_mermaid(mermaid_code):
    components.html(f"""
    <div class="mermaid">
        {mermaid_code}
    </div>
    <script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
      mermaid.initialize({{ startOnLoad: true }});
    </script>
    """, height=500, scrolling=True)

import streamlit as st
from PyPDF2 import PdfReader
from PIL import Image
from pdf2image import convert_from_bytes
import ollama

# ---------- TinyLLaMA Functions ----------
def extract_requirements_with_ollama(text):
    prompt = f"""
You are a project analyst. Extract the following from the RFP:

{text}

Extract:
- Functional Requirements
- Non-Functional Requirements
- Use Cases
- Constraints
"""
    response = ollama.chat(model="tinyllama:1.1b-chat", messages=[
        {"role": "user", "content": prompt}
    ])
    return response['message']['content']


def generate_project_plan_with_diagram(text):
    prompt = f"""
You are a senior project architect. Analyze the following project description and generate:

1. A professional project plan:
   - Objectives
   - Timeline (phases with weeks/months)
   - Team roles
   - Technology stack
   - Key deliverables
   - Risk & factors

2. A process flowchart in Markdown using Mermaid syntax.

Project description:
{text}
"""
    response = ollama.chat(model="tinyllama:1.1b-chat", messages=[
        {"role": "user", "content": prompt}
    ])
    return response['message']['content']

# ---------- UI Starts Here ----------
st.set_page_config(page_title=" RFP Copilot AI", layout="wide")
st.title(" AI RFP Copilot")

tab1, tab2,tab3 = st.tabs([" Upload RFP", " Paste Text","Email Auto-Respond"])

uploaded_text = ""
selected_page = 0

# ------- Tab 1: PDF Upload -------
with tab1:
    pdf_file = st.file_uploader("Upload a PDF", type=["pdf"])
    if pdf_file:
        pdf_reader = PdfReader(pdf_file)
        page_numbers = list(range(len(pdf_reader.pages)))
        selected_page = st.selectbox("Choose a page to extract", page_numbers)
        extracted_text = pdf_reader.pages[selected_page].extract_text()
        uploaded_text = extracted_text

        # Show preview of uploaded page
        images = convert_from_bytes(pdf_file.getvalue())
        st.image(images[selected_page], caption=f"Page {selected_page + 1}")

# ------- Tab 2: Manual Text Entry -------
with tab2:
    manual_text = st.text_area("Paste RFP content here", height=300)
    if manual_text.strip():
        uploaded_text = manual_text.strip()
with tab3:
    st.subheader(" Auto-Respond to Incoming RFP Emails")

    user_email = st.text_input("Your Gmail Address")
    user_pass = st.text_input("Gmail App Password", type="password")

    if st.button(" Check Email & Generate Reply"):
        if user_email and user_pass:
            from_email, email_text = read_latest_rfp_email(user_email, user_pass)

            if email_text:
                st.success(f" New RFP email received from: {from_email}")
                st.text_area(" RFP Email Content", value=email_text, height=250)

                with st.spinner("Generating response with TinyLLaMA..."):
                    project_plan = generate_project_plan_with_diagram(email_text)

                    st.subheader(" AI-Generated Response")
                    st.text_area("AI Response", value=project_plan, height=300)

                    send_auto_response(from_email, project_plan, user_email, user_pass)
                    st.success(" Auto-response sent successfully.")
            else:
                st.info(" No new unread RFP emails found with subject 'RFP'")
        else:
            st.warning("Please enter your Gmail and App Password to connect.")

# ------- Process and Display Output -------
if uploaded_text:
    with st.spinner(" Generating response from AI..."):
        requirements = extract_requirements_with_ollama(uploaded_text)
        project_plan_output = generate_project_plan_with_diagram(uploaded_text)

    plan_tab, flow_tab = st.tabs([" Project Plan", " Flowchart"])

    with plan_tab:
        st.subheader(" Extracted Requirements")
        st.markdown(requirements)

        st.subheader(" Project Plan with Timeline, Team, Tech Stack")
        st.markdown(project_plan_output)

    with flow_tab:
        st.subheader(" Project Flowchart")
        # Extract mermaid block
        if "```mermaid" in project_plan_output:
            mermaid_code = project_plan_output.split("```mermaid")[1].split("```")[0]
            st.markdown("```mermaid\n" + mermaid_code + "\n```")
        else:
            st.warning("No Mermaid diagram found in the output.")
else:
    st.info("Please upload a PDF or paste RFP text to get started.")

