# -*- coding: utf-8 -*-
"""rfpcopilotai-801.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yg1RcDIMlgLWpQLTElu3dFmqmbECLebK
"""

import imaplib
import email
from email.header import decode_header

def read_latest_rfp_email(username, password):
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(username, password)
    mail.select("inbox")

    status, messages = mail.search(None, '(UNSEEN SUBJECT "RFP")')
    email_ids = messages[0].split()

    if not email_ids:
        return None, None

    latest_id = email_ids[-1]
    res, msg_data = mail.fetch(latest_id, "(RFC822)")
    raw_email = msg_data[0][1]

    msg = email.message_from_bytes(raw_email)
    subject = decode_header(msg["Subject"])[0][0]
    from_email = msg.get("From")

    body = ""
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            if content_type == "text/plain":
                body += part.get_payload(decode=True).decode()
    else:
        body += msg.get_payload(decode=True).decode()

    return from_email, body

import smtplib
from email.mime.text import MIMEText

def send_auto_response(to_email, body, user_email, user_pass):
    msg = MIMEText(body)
    msg["Subject"] = "Auto-response to Your RFP"
    msg["From"] = user_email
    msg["To"] = to_email

    server = smtplib.SMTP_SSL("smtp.gmail.com", 465)
    server.login(user_email, user_pass)
    server.send_message(msg)
    server.quit()

import ollama

def extract_requirements_with_ollama(text):
    prompt = f"""You are a project analyst. Extract the following from the RFP:

{text}

Give:
- Functional Requirements
- Non-Functional Requirements
- Use-cases
- Constraints

"""

    response = ollama.chat(model="llama3", messages=[
        {"role": "user", "content": prompt}
    ])
    return response['message']['content']

import streamlit.components.v1 as components

def render_mermaid(mermaid_code):
    components.html(f"""
    <div class="mermaid">
        {mermaid_code}
    </div>
    <script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
      mermaid.initialize({{ startOnLoad: true }});
    </script>
    """, height=500, scrolling=True)

import streamlit as st
from PyPDF2 import PdfReader
import ollama
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
from io import BytesIO
import re
from fpdf import FPDF

st.set_page_config("RFP Copilot AI", layout="wide")
st.title("üìÑ RFP Copilot AI")

tabs = st.tabs(["üöÄ RFP Copilot", "‚ÑπÔ∏è Instructions"])

# --- Output Collection for Final PDF ---
if "pdf_outputs" not in st.session_state:
    st.session_state.pdf_outputs = []

# ------------------ Phase Parser ------------------
def extract_gantt_phases(text):
    pattern = re.compile(
        r"""
        [-*\u2022]?\s* # Optional bullet
        (?P<phase>[A-Za-z\s]+?)\s*[:\-\u2013]\s* # Phase name
        (Start\s*Week\s*(?P<start>\d+)[,;\-]?\s*)? # Start Week
        (Duration\s*[:\-]?\s*(?P<duration>\d+))?   # Duration
        """,
        re.IGNORECASE | re.VERBOSE
    )
    phases = []
    for line in text.strip().split('\n'):
        match = pattern.search(line)
        if match:
            try:
                name = match.group("phase").strip()
                start = int(match.group("start") or 1)
                duration = int(match.group("duration") or 1)
                start_date = datetime.today() + timedelta(weeks=start - 1)
                end_date = start_date + timedelta(weeks=duration)
                phases.append({"Phase": name, "Start": start_date, "End": end_date})
            except:
                continue
    return pd.DataFrame(phases)

# ------------------ Cost Parser ------------------
def parse_cost_file(text):
    lines = text.strip().split("\n")
    records = []
    for line in lines:
        parts = [p.strip() for p in line.split("|")]
        if len(parts) >= 3:
            try:
                role, effort, rate = parts[0], float(parts[1]), float(parts[2])
                records.append({"Role": role, "Weekly Effort": effort, "Rate/Day": rate})
            except:
                continue
    return pd.DataFrame(records)

# ------------------ Gantt Chart ------------------
def create_gantt_chart(phases_df):
    fig, ax = plt.subplots(figsize=(10, 4))
    for idx, row in phases_df.iterrows():
        ax.barh(row['Phase'], (row['End'] - row['Start']).days, left=row['Start'], color='skyblue')
        ax.text(row['Start'] + timedelta(days=1), idx, row['Phase'], va='center', fontsize=8)
    ax.xaxis.set_major_formatter(mdates.DateFormatter("%b-%d"))
    ax.set_title("üóìÔ∏è Project Gantt Chart")
    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf, fig

# ------------------ Cost Table ------------------
def render_cost_table(cost_df, phases_df):
    st.markdown("### üí∞ Cost Breakdown")
    total_weeks = (phases_df['End'] - phases_df['Start']).dt.days.sum() / 7
    cost_df['Total Cost'] = cost_df['Weekly Effort'] * total_weeks * 5 * cost_df['Rate/Day']
    st.table(cost_df[['Role', 'Weekly Effort', 'Rate/Day', 'Total Cost']])
    subtotal = cost_df['Total Cost'].sum()
    contingency = subtotal * 0.10
    grand_total = subtotal + contingency
    summary = f"""
| Description       | Amount (Rs)     |
|------------------:|----------------:|
| Subtotal          | {subtotal:,.2f} |
| 10% Contingency   | {contingency:,.2f} |
| **Grand Total**   | **{grand_total:,.2f}** |
"""
    st.markdown(summary, unsafe_allow_html=True)
    return summary

# ------------------ LLM Plan ------------------
def generate_plan(text):
    prompt = f"""
You are a senior architect. Analyze the RFP and return:
- A professional project plan
- Weekly timeline in this format:
  - Phase Name: Start Week X, Duration Y week

RFP:
{text}
"""
    resp = ollama.chat(model="tinyllama:1.1b-chat", messages=[{"role": "user", "content": prompt}])
    return resp['message']['content']

# ------------------ PDF Helper ------------------
class PDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 14)
        self.cell(0, 10, 'RFP Copilot AI Output', ln=True, align='C')
        self.ln(5)

    def add_section(self, title, content):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, title, ln=True)
        self.set_font('Arial', '', 11)
        self.multi_cell(0, 10, content)
        self.ln(3)

def clean_text(text):
    return text.replace("‚Ä¢", "-").replace("‚Çπ", "Rs.").replace("‚Äì", "-")

# ------------------ Main Tab ------------------
with tabs[0]:
    col1, col2 = st.columns(2)
    file = col1.file_uploader("üì• Upload RFP PDF", type="pdf")
    cost = col2.file_uploader("üíº Upload Cost File (.txt)", type="txt")

    if st.button("üöÄ Generate Plan"):
        st.session_state.pdf_outputs = []

        if not file:
            st.error("Please upload an RFP PDF.")
        else:
            try:
                pdf_reader = PdfReader(file)
                text = "\n".join([p.extract_text() or "" for p in pdf_reader.pages])
                if not text.strip():
                    st.error("Could not extract text from the PDF.")
                else:
                    plan = generate_plan(text)
                    st.subheader("üìù Project Plan")
                    st.markdown(plan)
                    st.session_state.pdf_outputs.append(("Project Plan", plan))

                    gantt_data = extract_gantt_phases(plan)
                    if not gantt_data.empty:
                        buf, fig = create_gantt_chart(gantt_data)
                        st.pyplot(fig)
                        st.download_button("üì• Download Gantt Chart", buf, file_name="gantt_chart.png")
                        st.session_state.pdf_outputs.append(("Gantt Chart", "Please refer to the separate Gantt chart image download."))
                    else:
                        st.warning("No phase info detected in plan.")
                        st.session_state.pdf_outputs.append(("Gantt Chart", "No phase information could be extracted for the Gantt chart."))

                    if cost:
                        cost_txt = cost.read().decode()
                        cost_df = parse_cost_file(cost_txt)
                        if not cost_df.empty:
                            summary_for_pdf = render_cost_table(cost_df, gantt_data)
                            summary_for_pdf = clean_text(summary_for_pdf)
                            st.session_state.pdf_outputs.append(("Cost Breakdown", summary_for_pdf))
                        else:
                            st.warning("Cost file could not be parsed.")
                            st.session_state.pdf_outputs.append(("Cost Breakdown", "Cost file could not be parsed."))
                    else:
                        st.info("Upload a costing text file to show budget.")
                        st.session_state.pdf_outputs.append(("Cost Breakdown", "No cost file uploaded."))
            except Exception as e:
                st.error(f"Error processing RFP: {e}")
                st.session_state.pdf_outputs.append(("Error", f"An error occurred: {e}"))

    if st.session_state.pdf_outputs:
        pdf = PDF()
        pdf.add_page()
        for title, content in st.session_state.pdf_outputs:
            pdf.add_section(title, clean_text(content))

        final_pdf = pdf.output(dest="S").encode("latin1", errors="replace")

        st.download_button(
            label="üìÑ Download Full Output as PDF",
            data=final_pdf,
            file_name="rfp_copilot_output.pdf",
            mime="application/pdf"
        )

# ------------------ Instruction Tab ------------------
with tabs[1]:
    st.header("‚ÑπÔ∏è Instructions: How to Use RFP Copilot AI")

    st.markdown("""
### üì• Step 1: Upload the RFP
- Click on **"Upload RFP PDF"** and upload your Request for Proposal (RFP) document.
- The system will extract the text from the uploaded PDF.
- Then, it will generate a professional project plan using AI.

### üíº Step 2: Upload the Costing File (Optional)
- Upload a `.txt` file containing the cost breakdown in this format:


- Make sure to:
  - Use `|` (pipe symbol) as separators.
  - Keep headers optional (they will be ignored if present).
  - Numbers **must not contain commas** or currency symbols.
  - `Weekly Effort`: Number of person-days per week for that role.
  - `Rate/Day`: Daily billing rate in ‚Çπ for each role.

### üìä Output You‚Äôll Receive
Once the RFP is processed:
- üìù A project plan generated by AI
- üìÜ A Gantt chart visualizing each project phase
- üí∞ A cost breakdown with:
  - Role-wise estimation
  - Subtotal
  - 10% contingency
  - Grand total
- üìÑ A downloadable PDF containing all output summaries

### üîç Tips for Best Results
- The Gantt chart is extracted from AI's response. Ensure it includes:
- Use clean, text-based PDFs (avoid image scans).
- If the Gantt chart or costing doesn‚Äôt appear:
- Check the format and spacing in your text files.
- Recheck if AI returned structured weekly phases.

---

If you need help, feel free to contact the project owner or contribute via GitHub if available!
""")

